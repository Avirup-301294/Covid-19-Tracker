{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","this","src","coronaImage","image","alt","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c6f3bd1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\nimport styles from \"./Cards.module.css\";\n\nexport default function Cards({\n    data: { confirmed, recovered, deaths, lastUpdate },\n}) {\n    if (!confirmed) {\n        return \"Loading....\";\n    }\n    // console.log(confirmed);\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid\n                    item\n                    component={Card}\n                    xs={12}\n                    md={3}\n                    className={cx(styles.card, styles.infected)}\n                >\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Infected\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of active cases of COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid\n                    item\n                    component={Card}\n                    xs={12}\n                    md={3}\n                    className={cx(styles.card, styles.recovered)}\n                >\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Recovered\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of recoveries from COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid\n                    item\n                    component={Card}\n                    xs={12}\n                    md={3}\n                    className={cx(styles.card, styles.deaths)}\n                >\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Deaths\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of deaths by COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","import axios from \"axios\";\n\nconst url = `https://covid19.mathdro.id/api`;\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        const {\n            data: { confirmed, recovered, deaths, lastUpdate },\n        } = await axios.get(changeableUrl);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        // console.log(data);\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n        return modifiedData;\n    } catch (error) {}\n};\n\nexport const fetchCountries = async () => {\n    try {\n        const {\n            data: { countries },\n        } = await axios.get(`${url}/countries`);\n        // console.log(response);\n        return countries.map((country) => country.name);\n    } catch (error) {}\n};\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nexport default function Chart({\n    data: { confirmed, recovered, deaths },\n    country,\n}) {\n    const [dailyData, setDailyData] = useState({});\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        };\n\n        fetchAPI();\n        // console.log(dailyData);\n    }, []);\n    const lineChart = dailyData.length ? (\n        <Line\n            data={{\n                labels: dailyData.map(({ date }) => date),\n                datasets: [\n                    {\n                        data: dailyData.map(({ confirmed }) => confirmed),\n                        label: \"Infected\",\n                        borderColor: \"#3333ff\",\n                        fill: true,\n                    },\n                    {\n                        data: dailyData.map(({ deaths }) => deaths),\n                        label: \"Deaths\",\n                        borderColor: \"red\",\n                        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n                        fill: true,\n                    },\n                ],\n            }}\n        />\n    ) : null;\n\n    // console.log(confirmed, recovered, deaths);\n\n    const barChart = confirmed ? (\n        <Bar\n            data={{\n                labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n                datasets: [\n                    {\n                        label: \"People\",\n                        backgroundColor: [\n                            \"rgba(0, 0, 255, 0.5)\",\n                            \"rgba(0, 255, 0, 0.5)\",\n                            \"rgba(255, 0, 0, 0.5)\",\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value],\n                    },\n                ],\n            }}\n            options={{\n                legend: { display: false },\n                title: { display: true, text: `Current state is ${country}` },\n            }}\n        />\n    ) : null;\n    return (\n        <div className={styles.container}>{country ? barChart : lineChart}</div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport { fetchCountries } from \"../../api\";\nimport styles from \"./CountryPicker.module.css\";\n\nexport default function CountryPicker({ handleCountryChange }) {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        };\n\n        fetchAPI();\n    }, [fetchedCountries]);\n    // console.log(fetchedCountries);\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect\n                defaultValue=\"\"\n                onChange={(e) => handleCountryChange(e.target.value)}\n            >\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => (\n                    <option key={i} value={country}>\n                        {country}\n                    </option>\n                ))}\n            </NativeSelect>\n        </FormControl>\n    );\n}\n","import React, { Component } from \"react\";\n\nimport styles from \"./App.module.css\";\nimport { Cards, CountryPicker, Chart } from \"./components\";\nimport { fetchData } from \"./api\";\nimport coronaImage from \"./images/image.png\";\n\nexport default class App extends Component {\n    state = {\n        data: {},\n        country: \"\",\n    };\n\n    async componentDidMount() {\n        const data = await fetchData();\n        // console.log(data);\n\n        this.setState({ data });\n    }\n\n    handleCountryChange = async (country) => {\n        // Fetch data\n        const data = await fetchData(country);\n        // console.log(data);\n        // Set state\n        this.setState({ data, country });\n    };\n\n    render() {\n        const { data, country } = this.state;\n        return (\n            <div className={styles.container}>\n                <img\n                    src={coronaImage}\n                    className={styles.image}\n                    alt=\"COVID-19\"\n                />\n                <Cards data={data} />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Chart data={data} country={country} />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}